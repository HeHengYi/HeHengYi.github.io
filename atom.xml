<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hehy&#39;s blog</title>
  
  <subtitle>只要思想不滑坡，办法总比困难多</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-05T06:30:16.330Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hehy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM(二)-垃圾回收前序</title>
    <link href="http://yoursite.com/JVM(%E4%BA%8C)-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%89%8D%E5%BA%8F/"/>
    <id>http://yoursite.com/JVM(%E4%BA%8C)-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%89%8D%E5%BA%8F/</id>
    <published>2020-04-01T05:20:29.000Z</published>
    <updated>2020-04-05T06:30:16.330Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过对内存结构的学习，已经明白了JVM运行时的内存结构，现在来看看垃圾处理，在此之前先做一下垃圾处理的准备工作。</p></blockquote><h2 id="1-引用类型"><a href="#1-引用类型" class="headerlink" title="1 引用类型"></a>1 引用类型</h2><ul><li>强引用：一般创建的对象均是强引用，只要强引用还在，垃圾收集器永远不会回收掉该对象。</li><li>软引用：不足时回收，充足时不回收。想实现软引用，则需要有一个单独的类来实现控制：<code>java.lang.ref.SoftReference</code>。</li><li>弱引用：弱引用本质的含义指的是说只要一进行GC处理，那么所引用的对象将会被立刻回收。弱引用需要使用的是Map接口的子类：<code>java.util.WeakHashMap</code>。</li><li>虚引用：虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列<code>java.lang.ref.ReferenceQueue</code>联合使用。被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</li></ul><h2 id="2-垃圾判定"><a href="#2-垃圾判定" class="headerlink" title="2 垃圾判定"></a>2 垃圾判定</h2><p>我们常常说的垃圾回收，那么垃圾是什么呢，简单的说垃圾就是不在被使用（引用）的对象，在程序中没有存在价值，所以要把这个对象回收掉。那么如何判断该对象是否是垃圾呢，这里介绍两种方法。</p><h3 id="1-1-引用计数法"><a href="#1-1-引用计数法" class="headerlink" title="1.1 引用计数法"></a>1.1 引用计数法</h3><p>它的做法是为每个对象添加一个引用计数器，用来统计指向该对象的引用个数。一旦某个对象的引用计数器为0，则说明该对象已经死亡，便可以被回收了。</p><p>很简单吧，但是这个方法有一个致命的弱点，循环引用不能清除。</p><p>比如：有一个Student对象，该对象有一班级属性指向另一个Class对象，该Class对象又有成员属性指向Student对象，那么此时当没有其他对象引用他们时，他们的计数器均为1，此时明明没有其他对象使用他们了，但是他们却不能得到回收。这样就是引用计数法的最大弊端。</p><h3 id="1-2-可达性分析"><a href="#1-2-可达性分析" class="headerlink" title="1.2 可达性分析"></a>1.2 可达性分析</h3><p>它的做法是通过一系列名为”GC Roots”的对象作为起始点，从这个被称为GC Roots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。也即给定一个集合的引用作为根出发，通过引用关系遍历对象图，能被遍历到的（可到达的）对象就被判定为存活，没有被遍历到的就自然被判定为死亡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;通过对内存结构的学习，已经明白了JVM运行时的内存结构，现在来看看垃圾处理，在此之前先做一下垃圾处理的准备工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-引用类型&quot;&gt;&lt;a href=&quot;#1-引用类型&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="基本功" scheme="http://yoursite.com/categories/java/%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码解析</title>
    <link href="http://yoursite.com/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2020-03-25T02:31:06.000Z</published>
    <updated>2020-03-31T13:32:49.640Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发时，高频使用的对象，研究看看源码</p></blockquote><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p><img src="../img/hashmap/hashmap结构.png"></p><ul><li>HashMap本地由其内部类<strong>Node</strong>对象组成的数组，通过hash算法获取对象的hash值，将对象存储于hash值对应的数组位置上。</li><li>因此在这种模式下，对象hash值是有相同的情况，由于Node对象本身设计了next属性，因此可将重复hash的后加对象放入next属性，此时此处就变成了单向链表。</li><li>随着HashMap存储的对象越来越多，内部对象碰撞的概率越大，造成的结果就是链表会越来越长，这样查询的效率就会降低，因此HashMap设置一个值，负载因子<strong><span style="color:red">DEFAULT_LOAD_FACTOR</span></strong>（默认为0.75）,当其对象个数大于数组大小*0.75时，HashMap就会进行扩容，扩容采用的位运算&lt;&lt;1，数组大小乘以两倍。</li><li>随着数组的扩容，依然有可能多个对象hash值重复， 还是会造成查询效率降低的问题，因此<strong>jdk1.8</strong>以后，加入了红黑树的设计。当链表长度超过<strong><span style="color:red">TREEIFY_THRESHOLD</span></strong>（默认为8）时，就会将链表转换为红黑树。</li></ul><p>总结：</p><p>​    HashMap是由 数组 + 链表 组成，jdk1.8以后是由 数组 + 链表 + 红黑树 组成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;开发时，高频使用的对象，研究看看源码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;p&gt;&lt;img src=
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="源码分析" scheme="http://yoursite.com/categories/java/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>JVM(一)-内存结构</title>
    <link href="http://yoursite.com/JVM(%E4%B8%80)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/JVM(%E4%B8%80)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</id>
    <published>2020-03-23T09:32:29.000Z</published>
    <updated>2020-03-31T01:35:14.805Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../img/jvm/内存模型.png" alt="内存模型"></p><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1 程序计数器"></a>1 程序计数器</h2><ul><li>作用：记住下一条jvm指令的执行地址</li><li>通过寄存器实现（寄存器是CPU读取速度最快的一个单元）</li><li>特点：<ul><li>线程私有</li><li>不会内存溢出</li></ul></li></ul><h2 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2 虚拟机栈"></a>2 虚拟机栈</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>Java Virtual Machine Stacks（Java虚拟机栈）</p><ul><li>每个线程运行需要的内存，称为虚拟机栈</li><li>每个栈由多个栈帧(Frame)组成，栈帧为每个方法分配运行空间，运行完毕自动释放</li><li>每个线程只有一个活动栈帧，对应正在执行的方法</li></ul><p>问题辨析：</p><p>1.垃圾回收是否涉及栈内存</p><p>不需要垃圾回收，方法执行完毕自动出栈释放内存</p><p>2.栈内存分配越大越好吗？</p><p>不好，值越大内存占用越多，间接减少线程数量</p><p>3.方法内的局部变量是否线程安全？</p><ul><li>如果方法内局部变量没有逃离方法的作用范围，它是线程安全的。</li><li>如果是局部变量引用了对象，并逃离方法的作用方法，需要考虑线程安全问题</li></ul><h3 id="2-2-栈内存溢出"><a href="#2-2-栈内存溢出" class="headerlink" title="2.2 栈内存溢出"></a>2.2 栈内存溢出</h3><ul><li>内存溢出报错：java.lang.StackOverflowError</li><li>设置参数：-Xss1M</li></ul><p>栈帧太多导致（递归）</p><p>栈帧太大导致（可能为变量过多，很少遇到）</p><h3 id="2-3-线程运行诊断"><a href="#2-3-线程运行诊断" class="headerlink" title="2.3 线程运行诊断"></a>2.3 线程运行诊断</h3><p>案例1：cpu占用过多</p><p>定位：</p><ol><li>用top定位哪个进程堆cpu的占用过高</li><li>ps H -eo pid,tid,%cpu | grep 进程id（此处查看哪个线程占用）</li><li>jstack 进程id（此处通过上一步的线程id转换为16进制，对比nid就可以知道哪行代码了）</li></ol><p>案例2：程序运行很长的时间没有结果</p><p>定位：</p><ol><li>死锁排查可通过 top | grep java 查看重复出现的进程，可以定位</li><li>jstack 进程id</li></ol><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3 本地方法栈"></a>3 本地方法栈</h2><p>存放的是native方法（Object对象有native方法）</p><h2 id="4-堆"><a href="#4-堆" class="headerlink" title="4 堆"></a>4 堆</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>通过new创建的对象都放在堆中</p><p>特点：</p><ul><li><p>线程共享，有线程安全问题</p></li><li><p>有垃圾回收机制</p></li></ul><h3 id="4-2-堆内存溢出"><a href="#4-2-堆内存溢出" class="headerlink" title="4.2 堆内存溢出"></a>4.2 堆内存溢出</h3><ul><li>内存溢出报错：java.lang.OutOfMemoryError：Java heap space</li><li>参数控制：-Xmx8m</li></ul><p>new 对象过多导致</p><h3 id="4-3-堆内存检测工具"><a href="#4-3-堆内存检测工具" class="headerlink" title="4.3 堆内存检测工具"></a>4.3 堆内存检测工具</h3><p>1.先通过jps查看java进程信息</p><p>2.然后通过jmap -heap %进程ID 查看内存快照信息，可观察Eden space的变化</p><p>3.通过jconsole观察内存变化图</p><p>4.通过jvisualvm工具察看变化图</p><h2 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5 方法区"></a>5 方法区</h2><p><img src="../img/jvm//内存结构.png" alt="内存结构"></p><h3 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1 定义"></a>5.1 定义</h3><p>线程共享</p><p>存储类的结构，包括字段、方法数据、方法代码、构造方法</p><h3 id="5-2-方法区内存溢出"><a href="#5-2-方法区内存溢出" class="headerlink" title="5.2 方法区内存溢出"></a>5.2 方法区内存溢出</h3><p>1.8及以后（元空间实现）</p><p>(java.lang.OutOfMemoryError:Metaspace)</p><p>-XX:MaxMetaspaceSize=8m</p><p>1.8以前（永久带实现）</p><p>(java.lang.OutOfMemoryError:PermGen)</p><p>-XX:MaxPermSize=8m</p><p>spring与mybatis都是用了cglib，底层就是动态类加载，会使用非常多的方法区内存，所以有可能溢出</p><h3 id="5-3-运行时常量池"><a href="#5-3-运行时常量池" class="headerlink" title="5.3 运行时常量池"></a>5.3 运行时常量池</h3><ul><li>常量池，就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</li><li>运行时常量池，常量池时 *.class文件中的，当该类被记载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</li></ul><h3 id="5-4-StringTable"><a href="#5-4-StringTable" class="headerlink" title="5.4 StringTable"></a>5.4 StringTable</h3><ul><li>常量池中的字符串仅是符号，第一次用时才变为对象</li></ul><ul><li>利用串池的机制，避免重复创建字符串对象</li></ul><ul><li>字符串变量拼接原理是stringbuilder（1.8）</li></ul><ul><li>字符串常量拼接原理是编译器优化</li></ul><ul><li>字符串加载也是延迟成为对象T</li></ul><ul><li><p>可以使用intern方法， 主动将串池中还没有的对象放入串池</p><ul><li>1.6是将自身复制放入串池，1.8是将本身放入串池</li></ul></li><li><p>可以被垃圾回收</p></li></ul><h3 id="5-5-StringTbale-性能调优"><a href="#5-5-StringTbale-性能调优" class="headerlink" title="5.5 StringTbale 性能调优"></a>5.5 StringTbale 性能调优</h3><ol><li>调整桶个数-XX:StringTableSize=200000</li><li>考虑常量是否入池</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../img/jvm/内存模型.png&quot; alt=&quot;内存模型&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-程序计数器&quot;&gt;&lt;a href=&quot;#1-程序计数器&quot; class=&quot;headerlink&quot; title=&quot;1 程序计数器&quot;&gt;&lt;/a&gt;1 程序计数器&lt;/h2&gt;&lt;ul
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="基本功" scheme="http://yoursite.com/categories/java/%E5%9F%BA%E6%9C%AC%E5%8A%9F/"/>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
</feed>
